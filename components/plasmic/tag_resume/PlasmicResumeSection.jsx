// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: nq12TutH13we1UigJmjqSV
// Component: DiI__yiN1D
import * as React from "react";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Title from "../../Title"; // plasmic-import: vrVBAkZgK6/component
import Button from "../../Button"; // plasmic-import: ibY8vYTLSJ-/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_tag_resume.module.css"; // plasmic-import: nq12TutH13we1UigJmjqSV/projectcss
import sty from "./PlasmicResumeSection.module.css"; // plasmic-import: DiI__yiN1D/css

export const PlasmicResumeSection__VariantProps = new Array("addNew");

export const PlasmicResumeSection__ArgProps = new Array();

function PlasmicResumeSection__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rootaddNew]: hasVariant(variants, "addNew", "addNew") }
      )}
    >
      <div
        data-plasmic-name={"column"}
        data-plasmic-override={overrides.column}
        className={classNames(projectcss.all, sty.column, {
          [sty.columnaddNew]: hasVariant(variants, "addNew", "addNew")
        })}
      >
        {(hasVariant(variants, "addNew", "addNew") ? true : true) ? (
          <Title
            data-plasmic-name={"title"}
            data-plasmic-override={overrides.title}
            className={classNames("__wab_instance", sty.title, {
              [sty.titleaddNew]: hasVariant(variants, "addNew", "addNew")
            })}
            section={true}
            text={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__z70U8,
                  {
                    [sty.textaddNew__z70U8LpIFv]: hasVariant(
                      variants,
                      "addNew",
                      "addNew"
                    )
                  }
                )}
              >
                {hasVariant(variants, "addNew", "addNew")
                  ? "add section +"
                  : "details"}
              </div>
            }
          />
        ) : null}
        {(hasVariant(variants, "addNew", "addNew") ? true : true) ? (
          <Button
            data-plasmic-name={"addNewSectionButton"}
            data-plasmic-override={overrides.addNewSectionButton}
            className={classNames("__wab_instance", sty.addNewSectionButton, {
              [sty.addNewSectionButtonaddNew]: hasVariant(
                variants,
                "addNew",
                "addNew"
              )
            })}
            color={"softGreen"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__gsTzt
              )}
            >
              {"new section +"}
            </div>
          </Button>
        ) : null}
        {(hasVariant(variants, "addNew", "addNew") ? true : true) ? (
          <textarea
            data-plasmic-name={"description"}
            data-plasmic-override={overrides.description}
            className={classNames(
              projectcss.all,
              projectcss.textarea,
              sty.description,
              {
                [sty.descriptionaddNew]: hasVariant(
                  variants,
                  "addNew",
                  "addNew"
                )
              }
            )}
            value={"This is a section field."}
          />
        ) : null}
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "column", "title", "addNewSectionButton", "description"],
  column: ["column", "title", "addNewSectionButton", "description"],
  title: ["title"],
  addNewSectionButton: ["addNewSectionButton"],
  description: ["description"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicResumeSection__ArgProps,
      internalVariantPropNames: PlasmicResumeSection__VariantProps
    });

    return PlasmicResumeSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicResumeSection";
  } else {
    func.displayName = `PlasmicResumeSection.${nodeName}`;
  }
  return func;
}

export const PlasmicResumeSection = Object.assign(
  // Top-level PlasmicResumeSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    column: makeNodeComponent("column"),
    title: makeNodeComponent("title"),
    addNewSectionButton: makeNodeComponent("addNewSectionButton"),
    description: makeNodeComponent("description"),
    // Metadata about props expected for PlasmicResumeSection
    internalVariantProps: PlasmicResumeSection__VariantProps,
    internalArgProps: PlasmicResumeSection__ArgProps
  }
);

export default PlasmicResumeSection;
/* prettier-ignore-end */
