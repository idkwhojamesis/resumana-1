// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: nq12TutH13we1UigJmjqSV
// Component: vrVBAkZgK6
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_tag_resume.module.css"; // plasmic-import: nq12TutH13we1UigJmjqSV/projectcss
import sty from "./PlasmicTitle.module.css"; // plasmic-import: vrVBAkZgK6/css

export const PlasmicTitle__VariantProps = new Array(
  "resume",
  "heading",
  "section"
);

export const PlasmicTitle__ArgProps = new Array("text");

function PlasmicTitle__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rootresume]: hasVariant(variants, "resume", "resume") }
      )}
    >
      {p.renderPlasmicSlot({
        defaultContents: "title placeholder",
        value: args.text,
        className: classNames(sty.slotTargetText, {
          [sty.slotTargetTextheading]: hasVariant(
            variants,
            "heading",
            "heading"
          ),

          [sty.slotTargetTextresume]: hasVariant(variants, "resume", "resume"),
          [sty.slotTargetTextsection]: hasVariant(
            variants,
            "section",
            "section"
          )
        })
      })}
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTitle__ArgProps,
      internalVariantPropNames: PlasmicTitle__VariantProps
    });

    return PlasmicTitle__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTitle";
  } else {
    func.displayName = `PlasmicTitle.${nodeName}`;
  }
  return func;
}

export const PlasmicTitle = Object.assign(
  // Top-level PlasmicTitle renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicTitle
    internalVariantProps: PlasmicTitle__VariantProps,
    internalArgProps: PlasmicTitle__ArgProps
  }
);

export default PlasmicTitle;
/* prettier-ignore-end */
