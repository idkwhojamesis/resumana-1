// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: nq12TutH13we1UigJmjqSV
// Component: zTvZ3EPO88
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_tag_resume.module.css"; // plasmic-import: nq12TutH13we1UigJmjqSV/projectcss
import sty from "./PlasmicResumeTag.module.css"; // plasmic-import: zTvZ3EPO88/css

export const PlasmicResumeTag__VariantProps = new Array();

export const PlasmicResumeTag__ArgProps = new Array("tagContent");

function PlasmicResumeTag__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {p.renderPlasmicSlot({
        defaultContents: (
          <div className={classNames(projectcss.all, sty.freeBox__mtOPj)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__mm5Vt
              )}
            >
              {"tag name"}
            </div>
          </div>
        ),

        value: args.tagContent
      })}
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicResumeTag__ArgProps,
      internalVariantPropNames: PlasmicResumeTag__VariantProps
    });

    return PlasmicResumeTag__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicResumeTag";
  } else {
    func.displayName = `PlasmicResumeTag.${nodeName}`;
  }
  return func;
}

export const PlasmicResumeTag = Object.assign(
  // Top-level PlasmicResumeTag renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicResumeTag
    internalVariantProps: PlasmicResumeTag__VariantProps,
    internalArgProps: PlasmicResumeTag__ArgProps
  }
);

export default PlasmicResumeTag;
/* prettier-ignore-end */
